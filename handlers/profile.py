import dataclasses

from telegrinder import Dispatch, Message, InlineKeyboard, InlineButton, CallbackQuery
from telegrinder.bot.rules import Text, FuncRule
from telegrinder.types import InlineKeyboardMarkup

import database.picture
from database.user import User
from client import api, bot, db
from keyboard.set import no_kb, KeyboardSet
from tools import send_profile, send_menu
import typing

dp = Dispatch()


def get_profile_inline_menu(user: User):
    return (
        InlineKeyboard(resize_keyboard=True)
        .add(InlineButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="profile/edit"))
        .add(
            InlineButton(
                "–°–∫—Ä—ã—Ç—å" if user.display else "–û—Ç–∫—Ä—ã—Ç—å",
                callback_data="profile/toggle_hide",
            )
        )
        .get_markup()
    )


HIDDEN_PIN = "\n\nüìç–°–µ–π—á–∞—Å —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –≤—ã–≤–æ–¥–∏—Ç—Å—è –≤ –ø–æ–∏—Å–∫–µ, —á—Ç–æ–±—ã –æ–Ω —Å–Ω–æ–≤–∞ –ø–æ–∫–∞–∑—ã–≤–∞–ª—Å—è —Ç–∞–º, –Ω–∞–∂–º–∏ ¬´–û—Ç–∫—Ä—ã—Ç—å¬ª."


async def edit_name(chat_id: int):
    await api.send_message(
        chat_id,
        "–ù–∞–ø–∏—à–∏ –º–Ω–µ —Ç–≤–æ–µ –Ω–æ–≤–æ–µ –∏–º—è",
        reply_markup=KeyboardSet.KEYBOARD_UNDO.get_markup(),
    )
    m, _ = await bot.dispatch.message.wait_for_message(chat_id)
    if not m.text or m.text.lower() == "–æ—Ç–º–µ–Ω–∏—Ç—å":
        return
    await db.query(
        "update User filter .telegram_id = <str>$telegram_id set {name := <str>$name}",
        telegram_id=str(chat_id),
        name=m.text,
    )
    await api.send_message(chat_id, "–ò–º—è –∏–∑–º–µ–Ω–µ–Ω–æ.", reply_markup=no_kb)


async def edit_age(chat_id: int):
    await api.send_message(
        chat_id,
        "–ù–∞–ø–∏—à–∏ —Ç–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä: 19",
        reply_markup=KeyboardSet.KEYBOARD_UNDO.get_markup(),
    )
    m, _ = await bot.dispatch.message.wait_for_message(
        chat_id,
        FuncRule(
            lambda msg, _: msg.text
            and (
                (msg.text.isdigit() and 15 <= int(msg.text) <= 100)
                or msg.text.lower() == "–æ—Ç–º–µ–Ω–∏—Ç—å"
            )
        ),
        default="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–ø–∏—à–∏ –≤–æ–∑–≤—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º, —É—á—Ç–∏, —á—Ç–æ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π "
        "–≤–æ–∑—Ä–∞—Å—Ç 15 –ª–µ—Ç",
    )
    if m.text.lower() == "–æ—Ç–º–µ–Ω–∏—Ç—å":
        return
    age = int(m.text)
    await db.query(
        "update User filter .telegram_id = <str>$telegram_id set {age := <int16>$age}",
        telegram_id=str(chat_id),
        age=age,
    )
    await api.send_message(chat_id, "–í–æ–∑—Ä–∞—Å—Ç –∏–∑–º–µ–Ω–µ–Ω.", reply_markup=no_kb)


async def edit_pictures(chat_id: int):
    await api.send_message(
        chat_id,
        "–ü—Ä–∏—à–ª–∏ –Ω–æ–≤—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è —Å–≤–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è.",
        reply_markup=KeyboardSet.KEYBOARD_UNDO.get_markup(),
    )

    photos: typing.List[str] = []
    while len(photos) < 3:
        ph_m, _ = await bot.dispatch.message.wait_for_message(
            chat_id,
            FuncRule(
                lambda msg, _: (
                    msg.text
                    and (
                        (msg.text.lower() in ("—ç—Ç–æ –≤—Å–µ", "—ç—Ç–æ –≤—Å—ë") and len(photos))
                        or msg.text.lower() == "–æ—Ç–º–µ–Ω–∏—Ç—å"
                    )
                )
                or msg.photo
            ),
            default="–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è —Ç–≤–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è",
        )
        if ph_m.text and ph_m.text.lower() in ("—ç—Ç–æ –≤—Å–µ", "—ç—Ç–æ –≤—Å—ë", "–æ—Ç–º–µ–Ω–∏—Ç—å"):
            if ph_m.text.lower() == "–æ—Ç–º–µ–Ω–∏—Ç—å":
                return
            break
        photos.append(ph_m.photo[-1].file_id)
        if len(photos) < 3:
            await api.send_message(
                chat_id,
                "–î–æ–±–∞–≤–∏–ª, –ø—Ä–∏—à–ª–∏ –º–Ω–µ –µ—â–µ, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å "
                "–µ—â–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤ –ø—Ä–æ—Ñ–∏–ª—å, –∏–ª–∏ –Ω–∞–ø–∏—à–∏ ¬´—ç—Ç–æ –≤—Å–µ¬ª.",
                reply_markup=KeyboardSet.KEYBOARD_THATS_ALL.get_markup(),
            )

    await database.picture.delete_by_user(chat_id)
    await database.picture.insert_many(chat_id, photos)

    await api.send_message(chat_id, "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã.")


async def edit_description(chat_id: int):
    await api.send_message(
        chat_id,
        "–ü—Ä–∏—à–ª–∏ –º–Ω–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ç–≤–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è",
        reply_markup=KeyboardSet.KEYBOARD_UNDO_EMPTY.get_markup(),
    )
    m, _ = await bot.dispatch.message.wait_for_message(chat_id)
    if not m.text or m.text.lower() == "–æ—Ç–º–µ–Ω–∏—Ç—å":
        return
    description = m.text
    if description.lower() == "–æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º":
        description = ""
    await db.query(
        "update User filter .telegram_id = <str>$telegram_id set {description := <str>$description}",
        telegram_id=str(chat_id),
        description=description,
    )
    await api.send_message(chat_id, "–û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ.", reply_markup=no_kb)


async def edit_gender(chat_id: int):
    await api.send_message(
        chat_id,
        "–¢—ã –ø–∞—Ä–µ–Ω—å –∏–ª–∏ –¥–µ–≤—É—à–∫–∞?",
        reply_markup=KeyboardSet.KEYBOARD_GENDER.get_markup(),
    )
    m, _ = await bot.dispatch.message.wait_for_message(
        chat_id,
        Text(["–ø–∞—Ä–µ–Ω—å", "–¥–µ–≤—É—à–∫–∞", "–æ—Ç–º–µ–Ω–∏—Ç—å"], ignore_case=True),
        default="–í—ã–±–µ—Ä–∏ –ª–∏–±–æ ¬´–ø–∞—Ä–µ–Ω—å¬ª, –ª–∏–±–æ ¬´–¥–µ–≤—É—à–∫–∞¬ª",
    )

    if m.text.lower() == "–æ—Ç–º–µ–Ω–∏—Ç—å":
        return

    gender = 0 if m.text.lower() == "–ø–∞—Ä–µ–Ω—å" else 1
    await db.query(
        "update User filter .telegram_id = <str>$telegram_id set {gender := <int16>$gender}",
        telegram_id=str(chat_id),
        gender=gender,
    )
    await api.send_message(chat_id, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª–∞ –∏–∑–º–µ–Ω–µ–Ω—ã.", reply_markup=no_kb)


async def edit_interest(chat_id: int):
    u = await db.query(
        "select User {interest} filter .telegram_id = <str>$telegram_id",
        telegram_id=str(chat_id),
    )
    if not u:
        return
    interest = list(u[0].interest)
    to_edit = (
        await api.send_message(
            chat_id,
            "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ª—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã",
            reply_markup=gen_interest_kb(interest),
        )
    ).unwrap()
    while True:
        q: CallbackQuery
        q, _ = await bot.dispatch.callback_query.wait_for_answer(chat_id)
        if not q.data.startswith("interest/"):
            continue
        elif q.data == "interest/done":
            if not interest:
                await q.answer("–í—ã–±–µ—Ä–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
            else:
                break
        elif q.data == "interest/b":
            if "b" in interest:
                interest.remove("b")
                await q.answer("–ü–∞—Ä–Ω–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏—Å–∫–æ–º—ã—Ö –ª—é–¥–µ–π")
            else:
                interest.append("b")
                await q.answer("–ü–∞—Ä–Ω–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏—Å–∫–æ–º—ã—Ö –ª—é–¥–µ–π")
        elif q.data == "interest/g":
            if "g" in interest:
                interest.remove("g")
                await q.answer("–î–µ–≤—É—à–∫–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏—Å–∫–æ–º—ã—Ö –ª—é–¥–µ–π")
            else:
                interest.append("g")
                await q.answer("–î–µ–≤—É—à–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏—Å–∫–æ–º—ã—Ö –ª—é–¥–µ–π")
        elif q.data == "interest/f":
            if "f" in interest:
                interest.remove("f")
                await q.answer("–î—Ä—É–∑—å—è —É–¥–∞–ª–µ–Ω—ã –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏—Å–∫–æ–º—ã—Ö –ª—é–¥–µ–π")
            else:
                interest.append("f")
                await q.answer("–î—Ä—É–∑—å—è –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏—Å–∫–æ–º—ã—Ö –ª—é–¥–µ–π")
        await api.edit_message_reply_markup(
            chat_id, to_edit.message_id, reply_markup=gen_interest_kb(interest)
        )

    await api.edit_message_text(
        chat_id,
        to_edit.message_id,
        text="–¢—ã –≤—ã–±—Ä–∞–ª: " + ", ".join([interest_dictionary.get(k) for k in interest]),
    )

    await db.query(
        "update User filter .telegram_id = <str>$telegram_id set {interest := <str>$interest}",
        telegram_id=str(chat_id),
        interest="".join(interest),
    )
    await api.send_message("–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω—ã.")


def gen_interest_kb(interest: typing.List[str]):
    return InlineKeyboardMarkup(
        **(
            InlineKeyboard()
            .add(
                InlineButton(
                    "–ü–∞—Ä–Ω–∏ ‚ù§Ô∏è" if "b" in interest else "–ü–∞—Ä–Ω–∏",
                    callback_data="interest/b",
                )
            )
            .row()
            .add(
                InlineButton(
                    "–î–µ–≤—É—à–∫–∏ ‚ù§Ô∏è" if "g" in interest else "–î–µ–≤—É—à–∫–∏",
                    callback_data="interest/g",
                )
            )
            .row()
            .add(
                InlineButton(
                    "–î—Ä—É–∑—å—è üí´" if "f" in interest else "–î—Ä—É–∑—å—è",
                    callback_data="interest/f",
                )
            )
            .add(InlineButton("–ì–æ—Ç–æ–≤–æ", callback_data="interest/done"))
            .dict()
        )
    )


interest_dictionary = {"b": "–ü–∞—Ä–Ω–µ–π", "g": "–î–µ–≤—É—à–µ–∫", "f": "–î—Ä—É–∑–µ–π"}


edit_dict = {
    "name": edit_name,
    "age": edit_age,
    "pictures": edit_pictures,
    "description": edit_description,
    "gender": edit_gender,
    "interest": edit_interest,
}


@dataclasses.dataclass
class UserDisplay:
    display: bool


@dp.message(Text(["/profile", "–º–æ–π –ø—Ä–æ—Ñ–∏–ª—å"], ignore_case=True))
async def profile(m: Message, user: User):
    await m.answer("–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:")
    mid = await send_profile(m.chat.id, m.chat.id)
    await m.answer(
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è —Å –ø—Ä–æ—Ñ–∏–ª–µ–º:" + ("" if user.display else HIDDEN_PIN),
        reply_markup=get_profile_inline_menu(user),
        reply_to_message_id=mid,
    )
    await send_menu(m.chat.id)


@dp.callback_query(
    FuncRule(lambda cb, _: cb["callback_query"].get("data") == "profile/edit")
)
async def profile_edit(cb: CallbackQuery):
    await cb.ctx_api.edit_message_text(
        cb.from_.id,
        cb.message.message_id,
        text="–ß—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç—ã —Ö–æ—á–µ—à—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?",
        reply_markup=KeyboardSet.KEYBOARD_EDIT.get_markup(),
    )
    await cb.answer("–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å.")


@dp.callback_query(
    FuncRule(
        lambda cb, _: cb["callback_query"].get("data", "").startswith("profile/edit/")
    )
)
async def profile_edit_field(cb: CallbackQuery):
    field = cb.data.replace("profile/edit/", "", 1)
    u = (
        await db.query(
            "select User {display} filter .telegram_id = <str>$telegram_id",
            telegram_id=str(cb.from_.id),
        )
    )[0]
    if field == "back":
        await cb.ctx_api.edit_message_text(
            cb.from_.id,
            cb.message.message_id,
            text="–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è —Å –ø—Ä–æ—Ñ–∏–ª–µ–º:",
            reply_markup=get_profile_inline_menu(u),
        )
        return
    elif field not in edit_dict:
        await cb.answer("–û—à–∏–±–∫–∞!")
        return
    await cb.answer("–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º.")
    await edit_dict[field](cb.from_.id)
    await profile(Message(**cb.message.dict(), unprep_ctx_api=cb.ctx_api), u)


@dp.callback_query(
    FuncRule(lambda cb, _: cb["callback_query"].get("data") == "profile/toggle_hide")
)
async def profile_hide(cb: CallbackQuery):
    await cb.answer("–ú–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø—Ä–æ—Ñ–∏–ª—å.")
    await db.query(
        "update User filter .telegram_id = <str>$telegram_id set { display := not .display }",
        telegram_id=str(cb.from_.id),
    )
    u = (
        await db.query(
            "select User {display} filter .telegram_id = <str>$telegram_id",
            telegram_id=str(cb.from_.id),
        )
    )[0]
    await profile(Message(**cb.message.dict(), unprep_ctx_api=cb.ctx_api), u)
